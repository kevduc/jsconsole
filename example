jsconsole.clear(); const body = document.body; const consoleElement = document.querySelector('#console'); document.head.insertAdjacentHTML('beforeend', `<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.3/css/all.min.css" integrity="sha512-iBBXm8fW90+nuLcSKlbmrPcLa0OT92xO1BIsZ+ywDWZCvqsWgccV3gFoRBv0z+8dLJgyAHIhR35VZc2oM/gI1w==" crossorigin="anonymous" referrerpolicy="no-referrer" />`); let muted = false; const volumeIcons = { true: "fa-volume-mute", false: "fa-volume-down" }; body.insertAdjacentHTML('afterbegin', `<i id="sound-control" style="cursor: pointer; --size: 3rem; width: var(--size); height: var(--size); font-size: var(--size); color: white; text-align: center; position: fixed; right: 1rem; top: 1rem; " class="fas ${volumeIcons[muted]}"></i>`); const soundControl = document.querySelector("#sound-control"); const setMuted = (tf) => { soundControl.classList.remove(volumeIcons[muted]); muted = tf; soundControl.classList.add(volumeIcons[muted]); }; soundControl.addEventListener('click', () => setMuted(!muted)); const say = (text) => { if (muted) return; speechSynthesis.cancel(); speechSynthesis.speak(new SpeechSynthesisUtterance(text)); }; const delay = (ms) => new Promise((resolve) => setTimeout(resolve, ms)); const updateConsolePosition = (x, y) => { consoleElement.style.bottom = `${Math.round(y)}px`; consoleElement.style.left = `${Math.round(x)}px`; }; const updateConsoleDimensions = (width, height) => { consoleElement.style.width = `${Math.round(width)}px`; consoleElement.style.height = `${Math.round(height)}px`; }; (async () => { const animationDuration = 400 /* ms */; consoleElement.style = `--overshoot: cubic-bezier(.61,-0.81,.48,1.20); --duration: ${animationDuration}ms; transition: height var(--duration) var(--overshoot), width var(--duration) var(--overshoot); `; updateConsoleDimensions(600, 350); await delay(animationDuration - 100); let {x, y, width, height} = consoleElement.getBoundingClientRect(); y = window.innerHeight - y - height /* because we use bottom instead of top */; consoleElement.style.position = "absolute"; consoleElement.style.margin = "0"; updateConsolePosition(x, y); body.parentElement.style = "position: relative; overflow: hidden; "; let camera = { x: 0, y: 0, width: window.innerWidth, height: window.innerHeight }; const cameraPadding = 0.2 /* 20% */; window.addEventListener('resize', () => { camera.width = window.innerWidth; camera.height = window.innerHeight; }); body.style = `position: absolute; height: 0; width: 0; left: ${-camera.x}; bottom: ${-camera.y};`; let position = { x, y }; const jumpSpeed = 2000 /* px/s */; const movementSpeed = 800 /* px/s */; let speed = { x: 0, y: 800 }; const fps = 60; const dt = 1/fps; const gravity = 9.8 /* m/sÂ² */ * 500 /* px/m */; const drag = 0.8; let keys = {}; let touchingGround = false; jsconsole.input.addEventListener("keydown", (e) => { if (touchingGround && !keys[e.key] && ['a', 'd'].includes(e.key)) { say("walk!") }; keys[e.key] = true; }); jsconsole.input.addEventListener("keyup", (e) => keys[e.key] = false); jsconsole.input.addEventListener('blur', () => { keys = {} }); setInterval(() => { const controls = { x: 0, y: 0 }; if (keys["w"] && touchingGround) { controls.y += jumpSpeed; touchingGround = false; say("jump!"); }; if (keys["s"]) { /* controls.y -= jumpSpeed; */ }; if (keys["a"]) { controls.x -= movementSpeed; }; if (keys["d"]) { controls.x += movementSpeed; }; position.x += speed.x * dt; position.y += speed.y * dt; if (controls.x !== 0) { speed.x = controls.x } else { speed.x += -drag * speed.x; }; speed.y += -gravity * dt + controls.y; if (position.x <= 0 && speed.x <= 0) { position.x = 0; speed.x = 0; }; if (position.y <= 0 && speed.y <= 0) { position.y = 0; speed.y = 0; touchingGround = true; }; updateConsolePosition(position.x, position.y); }, Math.round(1000 * dt)); })(); "Use the WASD keys to control the jsconsole!"